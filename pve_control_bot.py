#pve_control_bot.py
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.session.aiohttp import AiohttpSession
from proxmox import load_servers_config, get_server_by_name, ProxMox
import os
from dotenv import load_dotenv


load_dotenv()

API_TOKEN = os.getenv('BOT_TOKEN')
allowed_users_str = os.getenv('ALLOWED_USERS')  # String like "11111111,22222222"
if allowed_users_str:
    ALLOWED_USERS = [int(user_id) for user_id in allowed_users_str.split(',')]
else:
    ALLOWED_USERS = []
    raise ValueError('ALLOWED_USERS of this bot is empty')

logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
bot = Bot(token=API_TOKEN, session=AiohttpSession(), default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher(storage=MemoryStorage())
router = Router()


async def get_pves_inline_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    for server in pve_servers_config['servers']:
        # logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞: {server['name']}, callback_data='pve_{server['name']}'")
        keyboard.button(text=server['name'], callback_data=f"pve_{server['name']}")  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    
    return keyboard.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text == "–°–ø–∏—Å–æ–∫ PVE —Å–µ—Ä–≤–µ—Ä–æ–≤")
@router.message(Command("start"))
async def send_welcome(message: types.Message):
    if message.from_user.id in ALLOWED_USERS:
        kb = [
            [types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ PVE —Å–µ—Ä–≤–µ—Ä–æ–≤")]        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("VM PVE control", reply_markup=keyboard)        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:", reply_markup=await get_pves_inline_keyboard())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")


@router.callback_query(F.data.startswith("pve_"))  
async def process_pveserver_callback(callback_query: types.CallbackQuery):
    # logging.info(f"–ü–æ–ª—É—á–µ–Ω callback_data: {callback_query.data}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞

    if callback_query.from_user.id not in ALLOWED_USERS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!", show_alert=True)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ callback_data
    server_name = callback_query.data[4:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "pve_"

    # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ callback_query.message –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–Ω–æ —á–µ—Ä–µ–∑ bot.send_message
    chat_id = callback_query.message.chat.id
    await bot.send_message(chat_id, f"–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ vm —Å —Å–µ—Ä–≤–µ—Ä–∞: <b>{server_name}</b>")
    await callback_query.answer()  # –≠—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–ª–±—ç–∫–µ
    await pveserver_selected(server_name, chat_id=chat_id)


async def get_vmid_control_inline_keyboard(pve_host, vm_id) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text=f"‚ñ∂Ô∏è Start", callback_data=f"vmid_{vm_id}_{pve_host}_start")
    keyboard.button(text=f"‚èπÔ∏è Stop", callback_data=f"vmid_{vm_id}_{pve_host}_stop")
    keyboard.button(text=f"üîÉ Reboot", callback_data=f"vmid_{vm_id}_{pve_host}_reboot")
    
    return keyboard.as_markup()


async def pveserver_selected(pve_server_name, chat_id):
    # await bot.send_message(chat_id, f"PVE —Å–µ—Ä–≤–µ—Ä: {pve_server_name}")
    pve_server_config = get_server_by_name(pve_servers_config, pve_server_name)
    if not pve_server_config:
        logging.error(f'PVE server config not found')
        return None

    pve = ProxMox(proxmox_host=pve_server_config['host'], user=pve_server_config['user'], token_name=pve_server_config['token_name'], token_value=pve_server_config['token_value'])
    nodes = pve.get_node_vms()
    if not nodes:
        await bot.send_message(chat_id, f"Error. Something bad in bot happens.")
        return None
    for node_name, vms in nodes.items():
        await bot.send_message(chat_id, f"Node: <u><b>{node_name}</b></u>")
        for vm_id, vm_data in vms.items():
            vm_memory = int( vm_data['mem']/1024/1024/1024 )
            # vm_status = vm_data['status'] 
            match vm_data['status']:
                case 'stopped':
                    vm_status = vm_data['status'] + ' üî¥'
                case 'running':
                    vm_status = vm_data['status'] + ' üü¢'
                case _:
                    vm_status = vm_data['status'] + ' üü°'
            uptime = f"\nUptime: {vm_data['uptime']}" if vm_data['uptime'] else ''
            await bot.send_message(chat_id, 
                                   (f"VMID: {vm_id}, <b>{vm_data['name']}</b>, {vm_status}\n"
                                    f"CPU: {vm_data['cpus']}, {vm_data['cpu_load']*100:.1f}% Mem: {vm_memory}G"
                                    f"{uptime}"),
                                    reply_markup=await get_vmid_control_inline_keyboard(pve_server_config['name'], vm_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è –Ω–∞ "vmid_"
@router.callback_query(F.data.startswith("vmid_"))
async def process_vmid_callback(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º callback_data
    callback_data = callback_query.data

    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: —Ñ–æ—Ä–º–∞—Ç "vmid_{vm_id}_{pve_host}_{action}"
    callback_parts = callback_data.split("_")

    if len(callback_parts) < 4:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return

    vm_id = callback_parts[1]       # –ò–∑–≤–ª–µ–∫–∞–µ–º vm_id
    pve_node_name = callback_parts[2]     # –ò–∑–≤–ª–µ–∫–∞–µ–º pve_host
    action = callback_parts[3]       # –ò–∑–≤–ª–µ–∫–∞–µ–º action (start/stop/reboot)

    chat_id = callback_query.message.chat.id
    await bot.send_message(chat_id, f"VM {vm_id} –Ω–∞ {pve_node_name} –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {action}")

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–ª–∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    # await callback_query.answer(f"–í—ã–±—Ä–∞–Ω–∞ VM: {vm_id} –Ω–∞ —Ö–æ—Å—Ç–µ {pve_node_name} –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è: {action}")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å VM, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    # if action == "start":
    #     await start_vm(pve_host, vm_id)
    # elif action == "stop":
    #     await stop_vm(pve_host, vm_id)
    # elif action == "reboot":
    #     await reboot_vm(pve_host, vm_id)
    pve_server_config = get_server_by_name(pve_servers_config, pve_node_name)
    if not pve_server_config:
        logging.error(f'PVE server config not found')
        return None

    match action:
        case 'start':
            pve = ProxMox(proxmox_host=pve_server_config['host'], user=pve_server_config['user'], token_name=pve_server_config['token_name'], token_value=pve_server_config['token_value'])
            # pve.get_node_vms()
            result = pve.start_vm(pve_node_name, vm_id=vm_id)
            await callback_query.answer(f"–ö–æ–º–∞–Ω–¥–∞ –≤ {pve_node_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            if result != True:
                await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {result}")  
        case 'stop':
            pve = ProxMox(proxmox_host=pve_server_config['host'], user=pve_server_config['user'], token_name=pve_server_config['token_name'], token_value=pve_server_config['token_value'])
            result = pve.stop_vm(pve_node_name, vm_id=vm_id)
            await callback_query.answer(f"–ö–æ–º–∞–Ω–¥–∞ –≤ {pve_node_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            if result != True:
                await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {result}")  
        case 'reboot':
            pve = ProxMox(proxmox_host=pve_server_config['host'], user=pve_server_config['user'], token_name=pve_server_config['token_name'], token_value=pve_server_config['token_value'])
            result = pve.reboot_vm(pve_node_name, vm_id=vm_id)
            await callback_query.answer(f"–ö–æ–º–∞–Ω–¥–∞ –≤ {pve_node_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            if result != True:
                await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {result}")    
        case _:
            await callback_query.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")


    await callback_query.answer(f"–í—ã–ø–æ–ª–Ω—è—é {action} –Ω–∞ VM {vm_id} –≤ {pve_node_name}.")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(router)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
pve_servers_config = load_servers_config()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
